# -*- coding: utf-8 -*-
"""2023BigMartSalesPredictions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y0H63rbOjR3MlW5FYd_lyPyCasje8e55

***Import Dependencies***
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn import metrics
from xgboost import XGBRegressor
import matplotlib.pyplot as plt

"""***Data Collection and Preprocessing***"""

data=pd.read_csv("Mart.csv")
data.head()

data.shape

data.info()

data.describe()

data.isnull().sum()

"""***Handle Missing Values***
Mean->Average
Mode->More Repeated Values
"""

data['Item_Weight'].mean()

data['Item_Weight'].fillna(data['Item_Weight'].mean(),inplace=True)

data['Outlet_Size'].mode()

mode_outlet_size=data.pivot_table(values='Outlet_Size',columns='Outlet_Type',aggfunc=(lambda x:x.mode()[0]))

print(mode_outlet_size)

miss_values=data['Outlet_Size'].isnull()

print(miss_values)

data.loc[miss_values,'Outlet_Size']=data.loc[miss_values,'Outlet_Type'].apply(lambda x:mode_outlet_size[x])

data.isnull().sum()

"""***Data Analysis***"""

data.describe()

sns.set()
plt.figure(figsize=(6,6))
sns.displot(data['Item_Weight'])
plt.show()

sns.displot(data['Item_Visibility'])
plt.show()

sns.displot(data['Item_MRP'])
plt.show()

sns.displot(data['Item_Outlet_Sales'])
plt.show()

"""***Categorical Features***"""

sns.countplot(x='Item_Fat_Content',data=data)
plt.show()

plt.figure(figsize=(26,8))
sns.countplot(x='Item_Type',data=data)
plt.show()

"""#***Data Preprocessing***"""

data.head()

data['Item_Fat_Content'].value_counts()

data.replace({'Item_Fat_Content':{'low fat':'Low Fat','LF':'Low Fat','reg':'Regular'}},inplace=True)

data['Item_Fat_Content'].value_counts()

"""#***Label Encoding***"""

encoder=LabelEncoder()
data['Item_Identifier']=encoder.fit_transform(data['Item_Identifier'])
data['Item_Fat_Content']=encoder.fit_transform(data['Item_Fat_Content'])
data['Item_Type']=encoder.fit_transform(data['Item_Type'])
data['Outlet_Identifier']=encoder.fit_transform(data['Outlet_Identifier'])
data['Outlet_Size']=encoder.fit_transform(data['Outlet_Size'])
data['Outlet_Location_Type']=encoder.fit_transform(data['Outlet_Location_Type'])
data['Outlet_Type']=encoder.fit_transform(data['Outlet_Type'])

data.head()

"""#***Splitting Features and Target***"""

features=data.drop(columns='Item_Outlet_Sales',axis=1)
label=data['Item_Outlet_Sales']

features.head()

label.head()

features_train,features_test,label_train,label_test=train_test_split(features,label,test_size=0.2,random_state=2)

print(features.shape,label.shape,features_train.shape,label_train.shape,features_test.shape,label_test.shape)

"""#***Machine Learning Model Training***

***XGBoost Regressor***
"""

regressor=XGBRegressor()

regressor.fit(features_train,label_train)

"""#***Evaluation***"""

#training data predictions
train_predict=regressor.predict(features_train)
r2_train=metrics.r2_score(train_predict,label_train)
print('R Squared Value = ',r2_train)

#Test data predictions
test_predict=regressor.predict(features_test)
r2_test=metrics.r2_score(test_predict,label_test)
print('R Squared Value = ',r2_test)

"""#***Application Phase***"""

# Collect input from the user for various variables
Item_Identifier = input("\nPlease enter Item Identifier: ").strip()
Item_Weight = float(input("\nPlease enter Item Weight: "))
Item_Fat_Content = input("\nPlease enter Item Fat Content: ").strip()
Item_Visibility = float(input("\nPlease enter Item Visibility: "))
Item_Type = input("\nPlease enter Item Type: ").strip()
Item_MRP = float(input("\nPlease enter Item MRP: "))
Outlet_Identifier = input("\nPlease enter Outlet Identifier: ").strip()
Outlet_Establishment_Year = int(input("\nPlease enter Outlet Establishment Year: "))
Outlet_Size = input("\nPlease enter Outlet Size: ").strip()
Outlet_Location_Type = input("\nPlease enter Outlet Location Type: ").strip()
Outlet_Type = input("\nPlease enter Outlet Type: ").strip()

# Create a DataFrame from user input
user_input = pd.DataFrame({
    "Item_Identifier": [Item_Identifier],
    "Item_Weight": [Item_Weight],
    "Item_Fat_Content": [Item_Fat_Content],
    "Item_Visibility": [Item_Visibility],
    "Item_Type": [Item_Type],
    "Item_MRP": [Item_MRP],
    "Outlet_Identifier": [Outlet_Identifier],
    "Outlet_Establishment_Year": [Outlet_Establishment_Year],
    "Outlet_Size": [Outlet_Size],
    "Outlet_Location_Type": [Outlet_Location_Type],
    "Outlet_Type": [Outlet_Type]
})

print("\nUser Input Feature Vector:")
print("==========================\n")
user_input.head()

"""***Input Label Encoding***"""

user_input['Item_Identifier']=encoder.fit_transform(user_input['Item_Identifier'])
user_input['Item_Fat_Content']=encoder.fit_transform(user_input['Item_Fat_Content'])
user_input['Item_Type']=encoder.fit_transform(user_input['Item_Type'])
user_input['Outlet_Identifier']=encoder.fit_transform(user_input['Outlet_Identifier'])
user_input['Outlet_Size']=encoder.fit_transform(user_input['Outlet_Size'])
user_input['Outlet_Location_Type']=encoder.fit_transform(user_input['Outlet_Location_Type'])
user_input['Outlet_Type']=encoder.fit_transform(user_input['Outlet_Type'])

user_input.head()

Sales=regressor.predict(user_input)
from prettytable import PrettyTable
pretty_table = PrettyTable()
pretty_table.add_column("       <<<<<< Item Outlet Sales >>>>>       ",[Sales])
print(pretty_table)

"""#***Thanks For Reviewing this Document***"""